@using System.Reactive.Subjects
@using System.Reactive
@implements IDisposable
@page "/"

<PageTitle>Mouse events in blazor using RX.net</PageTitle>

<MouseEventLayer State="@_mouseState">
	<h1>Hello, world!</h1>

	Welcome to your new app.
	<h2>Mouse position</h2>
	<ul>
		<li><b>Screen</b>: @_mouseState.Position.Screen</li>
		<li><b>Page</b>: @_mouseState.Position.Page</li>
		<li><b>Client</b>: @_mouseState.Position.Client</li>
		<li><b>Offset</b>: @_mouseState.Position.Offset</li>
		<li><b>Movement</b>: @_mouseState.Position.Movement</li>
	</ul>
	
	<h2>Mouse buttons</h2>
	<ul>
		@foreach (var button in Buttons())
		{
			<li><b>@button.Name</b>: @(button.Pressed ? "Pressed" : "Not pressed"). MouseDown invoked @button.DownInvoked times. MouseUp invoked @button.UpInvoked times  </li>
		}
		
	</ul>

</MouseEventLayer>



@code
{

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_mouseState.OnAnyPropertyChanges().OnChangeUntil(_ => StateHasChanged(), _disposed);
		_mouseState.OnPropertyChanges(s => s.LeftButtonPressed).OnChangeUntil(v => UpdateStats(_left, v), _disposed);
		_mouseState.OnPropertyChanges(s => s.MiddleButtonPressed).OnChangeUntil(v => UpdateStats(_middle, v), _disposed);
		_mouseState.OnPropertyChanges(s => s.RightButtonPressed).OnChangeUntil(v => UpdateStats(_right, v), _disposed);
	}

	private void UpdateStats(MouseButtonStats stats, bool value)
	{
		stats.Pressed = value;
		if (value)
		{
			stats.DownInvoked++;
		}
		else
		{
			stats.UpInvoked++;
		}
	}

	private readonly MouseState _mouseState = new MouseState();
	private readonly MouseButtonStats _left = new MouseButtonStats("Left");
	private readonly MouseButtonStats _middle = new MouseButtonStats("Middle");
	private readonly MouseButtonStats _right = new MouseButtonStats("Right");
	private readonly ISubject<Unit> _disposed = new Subject<Unit>();

	private IEnumerable<MouseButtonStats> Buttons()
	{
		yield return _left;
		yield return _middle;
		yield return _right;
	}

	public void Dispose()
	{
		_disposed.OnNext(Unit.Default);
	}


	private record class MouseButtonStats(string Name)
	{
		public bool Pressed { get; set; }
		public int DownInvoked { get; set; }
		public int UpInvoked { get; set; }
	}
}
